<?php
// $Id$

/**
 * @file
 * Video Consultation Integration Module
 */

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Display help and module information
 *
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 *
 * @return help text for the path
 */
function vconsult_help($path, $arg) {
  switch ($path) {
    case "admin/help/vconsult":
      $output = '<p>' . t("Video Consultation Script integration module details, installation instructions, updates") . ': <a href="http://www.videowhisper.com/?p=Drupal+2+Way+Video+Chat+Module">http://www.videowhisper.com/?p=Drupal+2+Way+Video+Chat+Module</a></p>';
      break;
  }
  return $output;
}
// function vconsult_help

/**
 * Valid permissions for this module
 *
 * @return array An array of valid permissions for the vconsult_module module
 */
function vconsult_permission() {
  return array(
    'administer video consultation' => array(
      'title' => t('administer video consultation'),
      'description' => t('administer video consultation'),
    ),
    'create video consultation room' => array(
      'title' => t('create video consultation room'),
      'description' => t('create video consultation room'),
    ),
    'edit video consultation room' => array(
      'title' => t('edit video consultation room'),
      'description' => t('edit video consultation room'),
    ),
    'delete video consultation room' => array(
      'title' => t('delete video consultation room'),
      'description' => t('delete video consultation room'),
    ),
    'edit any video consultation room' => array(
      'title' => t('edit any video consultation room'),
      'description' => t('edit any video consultation room'),
    ),
    'delete any video consultation room' => array(
      'title' => t('delete any video consultation room'),
      'description' => t('delete any video consultation room'),
    ),
    'access video consultation room' => array(
      'title' => t('access video consultation room'),
      'description' => t('access video consultation room'),
    ),
    'edit welcome message' => array(
      'title' => t('edit welcome message'),
      'description' => t('edit welcome message'),
    ),
    'edit bandwidth' => array(
      'title' => t('edit bandwidth'),
      'description' => t('edit bandwidth'),
    ),
    'edit maxbandwidth' => array(
      'title' => t('edit maxbandwidth'),
      'description' => t('edit maxbandwidth'),
    ),
    'edit floodprotection' => array(
      'title' => t('edit floodprotection'),
      'description' => t('edit floodprotection'),
    ),
    'edit room_limit' => array(
      'title' => t('edit room_limit'),
      'description' => t('edit room_limit'),
    ),
    'edit background_url' => array(
      'title' => t('edit background_url'),
      'description' => t('edit background_url'),
    ),
    'edit fillwindow' => array(
      'title' => t('edit fillwindow'),
      'description' => t('edit fillwindow'),
    ),
    'edit layoutcode' => array(
      'title' => t('edit layoutcode'),
      'description' => t('edit layoutcode'),
    ),
    'edit filterregex' => array(
      'title' => t('edit filterregex'),
      'description' => t('edit filterregex'),
    ),
    'edit filterreplace' => array(
      'title' => t('edit filterreplace'),
      'description' => t('edit filterreplace'),
    ),
    'edit micrate' => array(
      'title' => t('edit micrate'),
      'description' => t('edit micrate'),
    ),
    'edit camfps' => array(
      'title' => t('edit camfps'),
      'description' => t('edit camfps'),
    ),
    'edit camheight' => array(
      'title' => t('edit camheight'),
      'description' => t('edit camheight'),
    ),
    'edit camwidth' => array(
      'title' => t('edit camwidth'),
      'description' => t('edit camwidth'),
    ),
    'edit credits' => array(
      'title' => t('edit credits'),
      'description' => t('edit credits'),
    ),
    'edit cleanup' => array(
      'title' => t('edit cleanup'),
      'description' => t('edit cleanup'),
    ),
    'edit availability' => array(
      'title' => t('edit availability'),
      'description' => t('edit availability'),
    ),
    'use privatetextchat' => array(
      'title' => t('use privatetextchat'),
      'description' => t('use privatetextchat'),
    ),
    'edit privatetextchat' => array(
      'title' => t('edit privatetextchat'),
      'description' => t('edit privatetextchat'),
    ),
    'use change_background' => array(
      'title' => t('use change_background'),
      'description' => t('use change_background'),
    ),
    'edit change_background' => array(
      'title' => t('edit change_background'),
      'description' => t('edit change_background'),
    ),
    'use publicvideosadd' => array(
      'title' => t('use publicvideosadd'),
      'description' => t('use publicvideosadd'),
    ),
    'edit publicvideosadd' => array(
      'title' => t('edit publicvideosadd'),
      'description' => t('edit publicvideosadd'),
    ),
    'use externalstream' => array(
      'title' => t('use externalstream'),
      'description' => t('use externalstream'),
    ),
    'edit externalstream' => array(
      'title' => t('edit externalstream'),
      'description' => t('edit externalstream'),
    ),
    'use files_enabled' => array(
      'title' => t('use files_enabled'),
      'description' => t('use files_enabled'),
    ),
    'edit files_enabled' => array(
      'title' => t('edit files_enabled'),
      'description' => t('edit files_enabled'),
    ),
    'use file_upload' => array(
      'title' => t('use file_upload'),
      'description' => t('use file_upload'),
    ),
    'edit file_upload' => array(
      'title' => t('edit file_upload'),
      'description' => t('edit file_upload'),
    ),
    'use file_delete' => array(
      'title' => t('use file_delete'),
      'description' => t('use file_delete'),
    ),
    'edit file_delete' => array(
      'title' => t('edit file_delete'),
      'description' => t('edit file_delete'),
    ),
    'use enabledvideo' => array(
      'title' => t('use enabledvideo'),
      'description' => t('use enabledvideo'),
    ),
    'edit enabledvideo' => array(
      'title' => t('edit enabledvideo'),
      'description' => t('edit enabledvideo'),
    ),
    'use enabledsound' => array(
      'title' => t('use enabledsound'),
      'description' => t('use enabledsound'),
    ),
    'edit enabledsound' => array(
      'title' => t('edit enabledsound'),
      'description' => t('edit enabledsound'),
    ),
    'use configuresource' => array(
      'title' => t('use configuresource'),
      'description' => t('use configuresource'),
    ),
    'edit configuresource' => array(
      'title' => t('edit configuresource'),
      'description' => t('edit configuresource'),
    ),
    'use users_enabled' => array(
      'title' => t('use users_enabled'),
      'description' => t('use users_enabled'),
    ),
    'edit users_enabled' => array(
      'title' => t('edit users_enabled'),
      'description' => t('edit users_enabled'),
    ),
    'use showcamsettings' => array(
      'title' => t('use showcamsettings'),
      'description' => t('use showcamsettings'),
    ),
    'edit showcamsettings' => array(
      'title' => t('edit showcamsettings'),
      'description' => t('edit showcamsettings'),
    ),
    'use regularcams' => array(
      'title' => t('use regularcams'),
      'description' => t('use regularcams'),
    ),
    'edit regularcams' => array(
      'title' => t('edit regularcams'),
      'description' => t('edit regularcams'),
    ),
    'use regularwatch' => array(
      'title' => t('use regularwatch'),
      'description' => t('use regularwatch'),
    ),
    'edit regularwatch' => array(
      'title' => t('edit regularwatch'),
      'description' => t('edit regularwatch'),
    ),
    'use chat_enabled' => array(
      'title' => t('use chat_enabled'),
      'description' => t('use chat_enabled'),
    ),
    'edit chat_enabled' => array(
      'title' => t('edit chat_enabled'),
      'description' => t('edit chat_enabled'),
    ),
    'use write_text' => array(
      'title' => t('use write_text'),
      'description' => t('use write_text'),
    ),
    'edit write_text' => array(
      'title' => t('edit write_text'),
      'description' => t('edit write_text'),
    ),
    'use advancedcamsettings' => array(
      'title' => t('use advancedcamsettings'),
      'description' => t('use advancedcamsettings'),
    ),
    'edit advancedcamsettings' => array(
      'title' => t('edit advancedcamsettings'),
      'description' => t('edit advancedcamsettings'),
    ),
    'use slideshow' => array(
      'title' => t('use slideshow'),
      'description' => t('use slideshow'),
    ),
    'edit slideshow' => array(
      'title' => t('edit slideshow'),
      'description' => t('edit slideshow'),
    ),
    'edit instantaccess' => array(
      'title' => t('edit instantaccess'),
      'description' => t('edit instantaccess'),
    ),
    'use publicvideoconfig' => array(
      'title' => t('use publicvideoconfig'),
      'description' => t('use publicvideoconfig'),
    ),
    'edit publicvideoconfig' => array(
      'title' => t('edit publicvideoconfig'),
      'description' => t('edit publicvideoconfig'),
    ),
    'use autoplay stream' => array(
      'title' => t('use autoplay stream'),
      'description' => t('use autoplay stream'),
    ),
    'edit autoplay stream' => array(
      'title' => t('edit autoplay stream'),
      'description' => t('edit autoplay stream'),
    ), //added
  );
}

/**
 * Menu for this module
 *
 * @return array An array with this module's menus.
 */
function vconsult_menu() {
  $items = array();
  $items['admin/config/videowhisper/vconsult'] = array(
    'title' => 'Video Consultation',
    'description' => 'Video Consultation admin interface.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vconsult_admin'),
    'access arguments' => array('administer video consultation'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['myvconsult'] = array(
    'title' => 'Video Consultation',
    'description' => 'My Video Consultation rooms.',
    'page callback' => 'vconsult_roomlist',
    'access arguments' => array('edit video consultation room'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['vconsult/start'] = array(
    'description' => 'My Video Consultation rooms.',
    'page callback' => 'vconsult_start',
    'access arguments' => array('edit video consultation room'),
    'type' => MENU_CALLBACK,
  );
  $items['vconsult/join'] = array(
    'description' => 'My Video Consultation rooms.',
    'page callback' => 'vconsult_join',
    'access arguments' => array('access video consultation room'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Room list page
 *
 * @return page contents.
 */
function vconsult_roomlist() {
  global $user;
  vconsult_cleanup();

  $a = array();
  $a[] = $user->uid;
  ///  $sql = ;
  $csql = "SELECT count(*) FROM {vconsult_rooms} r inner join  {node}  n on (n.nid=r.nid)  WHERE n.uid=?";

  $q = vwrooms_pager_query("SELECT r.room, n.title, n.nid,t.thumb FROM {vconsult_rooms} r inner join  {node}  n
   on (n.nid=r.nid)  left join {vwrooms_thumb} t on(t.nid=r.nid)  WHERE n.uid=?  ORDER BY r.timelastaccess DESC", $csql, $a);


  $data = array();
  while ($row =  $q->fetchAssoc()) {
    $r = array();

    $options = array("attributes" => array("title" => $row->room, 'target' => '_blank'));
    $r['type']='vconsult';
    $r['room']=$row['room'];
    $r['rid']=$row['nid'];

    $r['link'] = l("$row[title] ($row[room])", "node/$row[nid]", $options);
    $r['thumb'] = $row['thumb'];

    $data[] = $r;
  }


  /// $page_content .= "<BR><h3>$link</h3>";
  return theme('room_list', array('data' => $data, 'text' => 'Create new Video Consulation Room', 'type' => 'vconsult')) .vwrooms_pager();




}

/**
 * Room login form
 *
 * @return form an array of form data.
 */
function vconsult_start_form($form, &$form_state, $node) {
  global $base_url, $user;
  $form = array();
  //$url = $base_url . variable_get('vconsult_path', "/vconsult/") . "videoconsultation.php";



  $url = url("vconsult/start", array('absolute' => true));
  if ($node->uid != $user->uid) {
    $url = url("vconsult/join", array('absolute' => true));
  }

  if (user_access('vwrooms own name')) {
    $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => ($user->name ? $user->name : "Guest"),
    '#size' => 24,
    '#maxlength' => 64,
    '#description' => t("Username as you want it displayed within the chat."),
  );
  }
  else {

    $form['un'] = array( '#markup' => $user->name ? $user->name : "Guest");

    $form['username'] = array(
    '#type' => 'hidden',
    '#value' => ($user->name ? $user->name : "Guest"));


  }

  $form['r'] = array('#type' => 'hidden', '#value' => check_plain($node->room));

  $form['#action']     = $url;
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['submit']      = array(
    '#type' => 'submit',
    '#value' => t('Enter Video Consultation'),
  );
  return $form;
}

/**
 * Rooms cleanup
 */
function vconsult_cleanup() {
  //cleanup
  $ztime = REQUEST_TIME;
  ///  db_query("DELETE FROM {vconsult_rooms} WHERE ((timeexpire>0) AND (timeexpire<$ztime)) OR ((timeout>0) AND (($ztime-timelastaccess)>timeout))");
}

/**
 * Admin page
 *
 * @return page contents.
 */
function vconsult_admin($form, &$form_state) {
  $form = array();

  $form['vconsult_rtmp3'] = array(
    '#type' => 'textfield',
    '#title' => t('RTMP application address'),
    '#default_value' => variable_get('vconsult_rtmp3', "rtmp://server-domain-or-ip/videowhisper"),
    '#size' => 48,
    '#maxlength' => 255,
    '#description' => t("RTMP application address on a rtmp server."),
    '#required' => TRUE,
  );


  if (module_exists('vwcredits')) {




    $form['vconsult_paidrtmp3'] = array(
    '#type' => 'textfield',
    '#title' => t('RTMP application address for Paid Rooms'),
    '#default_value' => variable_get('consult_paidrtmp3', ""),
    '#size' => 48,
    '#maxlength' => 255,
    '#description' => t('Separate RTMP application address on a rtmp server for paid rooms. Leave blank to use the same.'),
    '#required' => false,
  );



  }





  $form['vconsult_amf3'] = array(
    '#type' => 'textfield',
    '#title' => t('RTMP AMF'),
    '#default_value' => variable_get('vconsult_amf3', "AMF3"),
    '#size' => 48,
    '#maxlength' => 10,
    '#description' => t("RTMP AMF (AMF3 : Red5, Wowza, FMIS3, FMIS3.5)"),
    '#required' => TRUE,
  );

///rtmfp://stratus.adobe.com/f1533cc06e4de4b56399b10d-1a624022ff71/


  $form['vconsult_rtmfp'] = array(
  '#type' => 'textfield',
  '#title' => t('RTMFP application address'),
        '#default_value' => variable_get('vconsult_rtmfp', "rtmfp://stratus.adobe.com/f1533cc06e4de4b56399b10d-1a624022ff71/"),
        '#size' => 48,
        '#maxlength' => 255,
  '#description' => t('RTMFP application address on a rtmp server. See <a href="http://www.videowhisper.com/?p=Requirements" target="_blank">Requirements</a> if you need more details about this.'),
        '#required' => TRUE,
    );
  $form['vconsult_sgroup'] = array(
          '#type' => 'textfield',
          '#title' => t('ServerGroup'),
          '#default_value' => variable_get('vconsult_sgroup', "VideoWhisper"),
          '#size' => 48,
          '#maxlength' => 255,
          '#description' => t('Server Group.'),
          '#required' => TRUE,
    );


  $form['vconsult_room_prefix3'] = array(
    '#type' => 'textfield',
    '#title' => t('Default room name'),
    '#default_value' => variable_get('vconsult_room_prefix3', "InstantRoom"),
    '#size' => 24,
    '#maxlength' => 48,
    '#description' => t("Default room name. A hash code is added if not changed by room creator."),
    '#required' => TRUE,
  );
$ff=false;
  $found = "";
  $path = variable_get('vconsult_path', "/" . drupal_get_path("module", "vconsult") . "/" . "vconsult" . "/");
  if (file_exists("." . $path)) {
    $found = t('Application folder detected: ') . $path;
  $ff=true;
  }
  else {
    $found = t('Please <a target="_blank" href="@url-download">download Video Consultation application</a>. Application folder NOT detected: %path', array('@url-download' => 'http://www.videowhisper.com/?p=PHP+Video+Consultation', '%path' => $path));
  }

  $form['vconsult_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Video Consultation path'),
    '#default_value' => variable_get('vconsult_path', "/" . drupal_get_path("module", "vconsult") . "/" . "vconsult" . "/"),
    '#size' => 58,
  '#disabled'=>$ff,

    '#description' => t("Path for the Video Consultation application folder.") . " " . $found,
    '#required' => TRUE,
  );

  $form['vconsult_cammaxbandwidth3'] = array(
    '#type' => 'textfield',
    '#title' => t('camMaxBandwidth'),
    '#default_value' => variable_get('vconsult_cammaxbandwidth3', "131072"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set camMaxBandwidth parameters."),
    '#required' => TRUE,
  );

  $form['vconsult_bufferlive3'] = array(
    '#type' => 'textfield',
    '#title' => t('bufferLive'),
    '#default_value' => variable_get('vconsult_bufferlive3', "0.5"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set bufferLive parameters."),
    '#required' => TRUE,
  );

  $form['vconsult_bufferfull3'] = array(
    '#type' => 'textfield',
    '#title' => t('bufferFull'),
    '#default_value' => variable_get('vconsult_bufferfull3', "0.5"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set bufferFull parameters."),
    '#required' => TRUE,
  );

  $form['vconsult_bufferliveplayback3'] = array(
    '#type' => 'textfield',
    '#title' => t('bufferLivePlayback'),
    '#default_value' => variable_get('vconsult_bufferliveplayback3', "0.2"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set bufferLivePlayback parameters."),
    '#required' => TRUE,
  );

  $form['vconsult_bufferfullplayback3'] = array(
    '#type' => 'textfield',
    '#title' => t('bufferFullPlayback'),
    '#default_value' => variable_get('vconsult_bufferfullplayback3', "0.5"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set bufferFullPlayback parameters."),
    '#required' => TRUE,
  );

  $form['vconsult_disableuploaddetection3'] = array(
    '#type' => 'radios',
    '#title' => t('disableUploadDetection'),
    '#default_value' => variable_get('vconsult_disableuploaddetection3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set disableUploadDetection parameters'),
  );

  $form['vconsult_disablebandwidthdetection3'] = array(
    '#type' => 'radios',
    '#title' => t('disableBandwidthDetection'),
    '#default_value' => variable_get('vconsult_disablebandwidthdetection3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set disableBandwidthDetection parameters'),
  );

  $form['vconsult_limitbybandwidth3'] = array(
    '#type' => 'radios',
    '#title' => t('limitBybandwidth'),
    '#default_value' => variable_get('vconsult_limitbybandwidth3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set limitBybandwidth parameters'),
  );

  $form['vconsult_fillwindow3'] = array(
    '#type' => 'radios',
    '#title' => t('fillwindow'),
    '#default_value' => variable_get('vconsult_fillwindow3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set fillwindow parameters'),
  );

  $form['vconsult_room_limit3'] = array(
    '#type' => 'textfield',
    '#title' => t('room_limit'),
    '#default_value' => variable_get('vconsult_room_limit3', "100"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set room_limit parameters."),
    '#required' => TRUE,
  );

  $form['vconsult_floodprotection3'] = array(
    '#type' => 'textfield',
    '#title' => t('floodprotection'),
    '#default_value' => variable_get('vconsult_floodprotection3', "3"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set floodprotection parameters."),
    '#required' => TRUE,
  );

  $form['vconsult_layoutcode3'] = array(
    '#type' => 'textfield',
    '#title' => t('layoutcode'),
    '#default_value' => variable_get('vconsult_layoutcode3', ""),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set layoutcode parameters."),
  );

  $form['vconsult_background_url3'] = array(
    '#type' => 'textfield',
    '#title' => t('background_url'),
    '#default_value' => variable_get('vconsult_background_url3', "templates/consultation/background.jpg"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set background_url parameters."),
  );

  $form['vconsult_privatetextchat3'] = array(
    '#type' => 'radios',
    '#title' => t('privatetextchat'),
    '#default_value' => variable_get('vconsult_privatetextchat3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set privatetextchat parameters'),
  );

  $form['vconsult_change_background3'] = array(
    '#type' => 'radios',
    '#title' => t('change_background'),
    '#default_value' => variable_get('vconsult_change_background3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set change_background parameters'),
  );

  $form['vconsult_externalstream3'] = array(
    '#type' => 'radios',
    '#title' => t('externalstream'),
    '#default_value' => variable_get('vconsult_externalstream3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set externalstream parameters'),
  );

  $form['vconsult_publicvideosadd3'] = array(
    '#type' => 'radios',
    '#title' => t('publicvideosadd'),
    '#default_value' => variable_get('vconsult_publicvideosadd3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set publicvideosadd parameters'),
  );

  $form['vconsult_files_enabled3'] = array(
    '#type' => 'radios',
    '#title' => t('files_enabled'),
    '#default_value' => variable_get('vconsult_files_enabled3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set files_enabled parameters'),
  );

  $form['vconsult_file_upload3'] = array(
    '#type' => 'radios',
    '#title' => t('file_upload'),
    '#default_value' => variable_get('vconsult_file_upload3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set file_upload parameters'),
  );

  $form['vconsult_file_delete3'] = array(
    '#type' => 'radios',
    '#title' => t('file_delete'),
    '#default_value' => variable_get('vconsult_file_delete3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set file_delete parameters'),
  );

  $form['vconsult_chat_enabled3'] = array(
    '#type' => 'radios',
    '#title' => t('chat_enabled'),
    '#default_value' => variable_get('vconsult_chat_enabled3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set chat_enabled parameters'),
  );

  $form['vconsult_enabledvideo3'] = array(
    '#type' => 'radios',
    '#title' => t('enabledVideo'),
    '#default_value' => variable_get('vconsult_enabledvideo3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set enabledVideo parameters'),
  );

  $form['vconsult_enabledsound3'] = array(
    '#type' => 'radios',
    '#title' => t('enabledSound'),
    '#default_value' => variable_get('vconsult_enabledsound3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set enabledSound parameters'),
  );

  $form['vconsult_configuresource3'] = array(
    '#type' => 'radios',
    '#title' => t('configureSource'),
    '#default_value' => variable_get('vconsult_configuresource3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set configureSource parameters'),
  );

  $form['vconsult_advancedcamsettings3'] = array(
    '#type' => 'radios',
    '#title' => t('advancedcamsettings'),
    '#default_value' => variable_get('vconsult_advancedcamsettings3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set advancedcamsettings parameters'),
  );

  $form['vconsult_showcamsettings3'] = array(
    '#type' => 'radios',
    '#title' => t('showCamsettings'),
    '#default_value' => variable_get('vconsult_showcamsettings3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set showCamsettings parameters'),
  );

  $form['vconsult_users_enabled3'] = array(
    '#type' => 'radios',
    '#title' => t('users_enabled'),
    '#default_value' => variable_get('vconsult_users_enabled3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set users_enabled parameters'),
  );

  $form['vconsult_write_text3'] = array(
    '#type' => 'radios',
    '#title' => t('write_text'),
    '#default_value' => variable_get('vconsult_write_text3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set write_text parameters'),
  );

  $form['vconsult_regularcams3'] = array(
    '#type' => 'radios',
    '#title' => t('regularcams'),
    '#default_value' => variable_get('vconsult_regularcams3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set regularcams parameters'),
  );

  $form['vconsult_regularwatch3'] = array(
    '#type' => 'radios',
    '#title' => t('regularwatch'),
    '#default_value' => variable_get('vconsult_regularwatch3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set regularwatch parameters'),
  );

  $form['vconsult_slideshow3'] = array(
    '#type' => 'radios',
    '#title' => t('slideshow'),
    '#default_value' => variable_get('vconsult_slideshow3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set slideshow parameters'),
  );

  //paid and default



  ///paidandefu




  $form['vconsult_autoplaystream'] = array(
  '#type' => 'textfield', '#default_value' => variable_get('vconsult_autoplaystream', ''),
  '#title' => t('AutoplayStream'),
  '#description' => t("Autoplaystream."),

  );


  $form['vconsult_autoplayserver'] = array(
  '#type' => 'textfield', '#default_value' => variable_get('vconsult_autoplayserver', ''),
  '#title' => t('Autoplay Server'),
  '#description' => t("Autoplay Server."),

  );













  $form['vconfig'] = array('#type' => 'fieldset', '#title' => t('Video Configurations'));
  $form['vconfig']['vconsult_publicvideon'] = array('#type' => 'textfield', '#title' => t('Initial panels'), '#default_value' => variable_get('vconsult_publicvideon', 3));
  $form['vconfig']['vconsult_publicvideomax'] = array('#type' => 'textfield', '#title' => t('Maximum number of panels'), '#default_value' => variable_get('vconsult_publicvideomax', 8));
  $form['vconfig']['vconsult_publicvideowidth'] = array('#type' => 'textfield', '#title' => t('Video Panel Width'), '#default_value' => variable_get('vconsult_publicvideowidth', 160));
  $form['vconfig']['vconsult_publicvideoheight'] = array('#type' => 'textfield', '#title' => t('Video Panel height'), '#default_value' => variable_get('vconsult_publicvideoheight', 100));
  $form['vconfig']['vconsult_publicvideocol'] = array('#type' => 'textfield', '#title' => t('Video Panel cols'), '#default_value' => variable_get('vconsult_publicvideocol', 2));
  $form['vconfig']['vconsult_publicvideorow'] = array('#type' => 'textfield', '#title' => t('Video Panel row'), '#default_value' => variable_get('vconsult_publicvideorow', 0));
  $form['vconfig']['vconsult_publicvideox'] = array('#type' => 'textfield', '#title' => t('Video Panel x'), '#default_value' => variable_get('vconsult_publicvideox', 100));
  $form['vconfig']['vconsult_publicvideoy'] = array('#type' => 'textfield', '#title' => t('Video Panel y'), '#default_value' => variable_get('vconsult_publicvideoy', 100));



  $form['fre'] = array('#type' => 'fieldset', '#title' => module_exists('vwcredits')? t('Free mode settings'):t('Additional Settings'), '#collapsible' => true, '#collapsed' => true);
  $options = implode(",", array("320x240" => "320x240", "160x120" => "160x120", "176x144" => "176x144"));

  $form['fre']['vconsult_defaultresolution'] = array(
  '#type' => 'textfield', '#default_value' => variable_get('vconsult_defaultresolution', $options),
  '#title' => t('Resolutions'),
  '#description' => t('Comma separated camera resoluton  list: 320X240,160X120,176X144,352X288,640X480 *'),

  );

  $form['fre']['vconsult_defaultresolutiond'] = array(
    '#type' => 'textfield', '#default_value' => variable_get('vconsult_defaultresolutiond', '176x144'),
    '#title' => t('Default Resolution'),
	'#options' => array("320x240" => "320x240", "160x120" => "160x120", "176x144" => "176x144"),
  );


  $options = implode(",", array("15" => "15", "10" => "10", "12" => "12", "20" => "20"));

  $form['fre']['vconsult_defaultcamfps'] = array(
    '#type' => 'textfield', '#default_value' => variable_get('vconsult_defaultcamfps', $options),
    '#title' => t('Camera FPS'),
    '#description' => t('Comma separated camera frames per second list list :15,10,12,20,25,30 *'),

  );

  $form['fre']['vconsult_defaultcamfpsd'] = array(
      '#type' => 'textfield', '#default_value' => variable_get('vconsult_defaultcamfpsd', '20'),
      	'#options' => array("15" => "15", "10" => "10", "12" => "12", "20" => "20"),
      '#title' => t('Default Camera FPS'),

  );

  $options = implode(",", array("22" => "22", "11" => "11"));


  $form['fre']['vconsult_defaultmicrate'] = array(
    '#type' => 'textfield', '#default_value' => variable_get('vconsult_defaultmicrate', $options),
    '#title' => t('Micrates'),
    '#description' => t('Comma separated  list : 22,11,44,48 *'),

  );

  $form['fre']['vconsult_defaultmicrated'] = array(
      '#type' => 'textfield', '#default_value' => variable_get('vconsult_defaultmicrated', '22'),
      '#title' => t('Default Micrate'),
      '#options' => array("22" => "22", "11" => "11"),

  );



  $form['fre']['vconsult_defaultbandwidth'] = array(
  '#type' => 'textfield', '#default_value' => variable_get('vconsult_defaultbandwidth', '50000'),
  '#title' => t('Bandwidth'),
    '#description' => t("Default bandwidth per video stream in bytes per second. "),
  '#size' => '6',
  '#maxlength' => 8,

    );

  $form['fre']['vconsult_defaultmaxbandwidth'] = array(
  '#type' => 'textfield', '#default_value' => variable_get('vconsult_defaultmaxbandwidth', '100000'),
  '#title' => t('Max Bandwidth'),
    '#description' => t("Maximum bandwidth per video stream in bytes per second."),
   '#size' => '6',
    '#maxlength' => 8,
  );




  if (module_exists('vwcredits')) {

    $form['paid'] = array('#type' => 'fieldset', '#collapsible' => true, '#collapsed' => true, '#title' => t('Paid mode Settings'));

    $options = implode(",", array("320x240" => "320x240", "160x120" => "160x120", "176x144" => "176x144", '352x288' => '352x288', '640x480' => '640x480' ));

    $form[paid]['vconsult_paidresolution'] = array(
  	  '#type' => 'textfield', '#default_value' => variable_get('vconsult_paidresolution', $options),
  	  '#title' => t('Resolutions'),
  	  '#description' => t('Comma separated camera resolution list for paid rooms *'),
  	  '#maxlength' => 80,

  	);

    $form[paid]['vconsult_paidresolutiond'] = array(
  	  	  '#type' => 'textfield', '#default_value' => variable_get('vconsult_paidresolutiond', '640x480'),
  	  	  '#title' => t('Default Resolution'),
  	  	  	'#options' => array("320x240" => "320x240", "160x120" => "160x120", "176x144" => "176x144", '352x288' => '352x288', '640x480' => '640x480' ),
  	  	  '#maxlength' => 80,

  	);


    $options = implode(",", array("15" => "15", "10" => "10", "12" => "12", "20" => "20", "25" => "25", "30" => "30"));




    $form['paid']['vconsult_paidcamfps'] = array(
    '#type' => 'textfield', '#default_value' => variable_get('vconsult_paidcamfps', $options),
    '#title' => t('Camera FPS'),
    '#description' => t('Comma separated camera frames per second list for paid rooms *'),
     	'#size' => '60',
    '#maxlength' => 80,

  );

    $form['paid']['vconsult_paidcamfpsd'] = array(
    '#type' => 'textfield', '#default_value' => variable_get('vconsult_paidcamfpsd', '30'),
    '#title' => t('Default Camera FPS'),
    '#options' => array("15" => "15", "10" => "10", "12" => "12", "20" => "20", "25" => "25", "30" => "30"),
    '#maxlength' => 80,

  );

    $options = implode(",", array("22" => "22", "11" => "11", "44" => "44", "48" => "48"));

    $form['paid']['vconsult_paidmicrate'] = array(
    '#type' => 'textfield', '#default_value' => variable_get('vconsult_paidmicrate', $options),
    '#title' => t('Micrates'),
    '#description' => t('Comma separated  list of micrate for paid rooms *'),
    	'#size' => '60',
    '#maxlength' => 80,

  );


    $form['paid']['vconsult_paidmicrated'] = array(
  '#type' => 'textfield', '#default_value' => variable_get('vconsult_paidmicrated', '48'),
  '#title' => t('Default Micrate'),
  '#options' => array("22" => "22", "11" => "11", "44" => "44", "48" => "48"),
      '#maxlength' => 80,

    );



    $form['paid']['vconsult_paidbandwidth'] = array(
    '#type' => 'textfield', '#default_value' => variable_get('vconsult_paidbandwidth', '70000'),
    '#title' => t('Bandwidth'),
    '#description' => t("Default bandwidth per video stream in bytes per second for paid rooms."),
    	'#size' => '6',
    '#maxlength' => 8,

  );
    $form['paid']['vconsult_paidmaxbandwidth'] = array(
    '#type' => 'textfield', '#default_value' => variable_get('vconsult_paidmaxbandwidth', '200000'),
    '#title' => t('Max. Bandwidth'),
    '#description' => t("Maximum bandwidth per video stream in bytes per second for paid rooms."),
  	'#size' => '6',
    '#maxlength' => 8,

  );


  }



  $form['#validate'][] = '_vconsult_settings_validate';
  return system_settings_form($form);
}



function _vconsult_settings_validate($form, &$form_state) {

  $v = &$form_state['values'];

  $mic = explode(",", $v['vconsult_defaultmicrate']);
  $options = array("22" => "22", "11" => "11", "44" => "44", "48" => "48");
  foreach ($mic as $c) {
    if (!in_array($c, $options)) {
      form_set_error('vconsult_defaultmicrate', t('Invalid micrate'));
    }
  }



  $campfs = explode(",", $v['vconsult_defaultcamfps']);
  $options = array("15" => "15", "10" => "10", "12" => "12", "20" => "20", "25" => "25", "30" => "30");


  foreach ($campfs as $c) {
    if (!in_array($c, $options)) {
      form_set_error('vconsult_defaultcamfps', t('Invalid campfps'));
    }
  }



  $rs = explode(",", $v['vconsult_defaultresolution']);
  $options = array("320x240" => "320x240", "160x120" => "160x120", "176x144" => "176x144", "352x288" => "352x288", "640x480" => "640x480");

  foreach ($rs as $c) {
    if (!in_array($c, $options)) {
      form_set_error('vconsult_defaultresolution', t('Invalid resolution'));
    }
  }

if(module_exists('vwcredits')){
  $rs = explode(",", $v['vconsult_paidresolution']);
  $campfs = explode(",", $v['vconsult_paidcamfps']);
  $options = array("15" => "15", "10" => "10", "12" => "12", "20" => "20", "25" => "25", "30" => "30");

  foreach ($campfs as $c) {
  	if (!in_array($c, $options)) {
  		form_set_error('vconsult_paidcamfps', t('Invalid camfps'));
  	}
  }

  $options = array("320x240" => "320x240", "160x120" => "160x120", "176x144" => "176x144", "352x288" => "352x288", "640x480" => "640x480");

  foreach ($rs as $c) {
    if (!in_array($c, $options)) {
      form_set_error('vconsult_paidresolution', t('Invalid resolution'));
    }
  }

  $options = array("22" => "22", "11" => "11", "44" => "44", "48" => "48");
  $mic = explode(",", $v['vconsult_paidmicrate']);
  foreach ($mic as $c) {
  	if (!in_array($c, $options)) {
  		form_set_error('vconsult_paidmicrate', t('Invalid micrate'));
  	}
  }

}



}





function _vconsult_broadcastoptions(&$node) {
  /*
   if(isset($_GET['mode'])){
   if($_GET['mode']=='P'||$_GET['mode']=='F')
   $prevmode=$node->roommode;


   $node->roommode=$_GET['mode'];
   if($prevmode=='P'&&$node->roommode=='F'){

   unset($node->bandwidth,$node->manxbandwidth,$node->micrate,$node->camfps,$node->resolution,$node->camwidth);

   }


   }
   if(module_exists('vwcredits')&&!user_access('vwcredits create free room')){

   $node->roommode='P';

   }*/

  vwrooms_broadoptions($node);


  $bo = array();
  if ($node->camwidth) {
    $node->resolution = $node->camwidth . "x" . $node->camheight;
  }

  if ($node->roommode == 'P' && module_exists('vwcredits')) {




    $df = variable_get('vconsult_paidresolution', '');
    $dfv = variable_get('vconsult_paidresolutiond', '');

    if ($df) {
      $o = explode(",", $df);
      $options = array();
      foreach ($o as $v) {
        $options[$v] = $v;
      }
      $default = $dfv;
    }
    else {
      $options = array("320x240" => "320x240", "160x120" => "160x120", "176x144" => "176x144", "352x288" => "352x288", "640x480" => "640x480");
      $default = "640x480";
    }
    if ($node->resolution) {
      $default = $node->resolution;
    }

    $bo['resolution'][0] = $options;
    $bo['resolution'][1] = $default;








    $df = variable_get('vconsult_paidcamfps', '');
    $dfv = variable_get('vconsult_paidcamfpsd', '');

    if ($df) {
      $o = explode(",", $df);
      $options = array();
      foreach ($o as $v) {
        $options[$v] = $v;
      }
      $default = $dfv;
    }
    else {
      $options = array("15" => "15", "10" => "10", "12" => "12", "20" => "20", "25" => "25", "30" => "30");
      $default = "25";
    }
    if ($node->campfs) {
      $default = $node->camfps;
    }

    $bo['camfps'][0] = $options;
    $bo['camfps'][1] = $default;








    $df = variable_get('vconsult_paidmicrate', '');
    $dfv = variable_get('vconsult_paidmicrated', '');

    if ($df) {
      $o = explode(",", $df);
      $options = array();
      foreach ($o as $v) {
        $options[$v] = $v;
      }
      $default = $dfv;
    }
    else {

      $options = array("22" => "22", "11" => "11", "44" => "44", "48" => "48");
      $default = "44";
    }
    if ($node->micrate) {
      $default = $node->micrate;
    }

    $bo['micrate'][0] = $options;
    $bo['micrate'][1] = $default;






    $df = variable_get('vconsult_paidbandwidth', '');
    if (!$df) {
      $df = '70000';
    }
    $bo['bandwidth'] = $node->bandwidth ? $node->bandwidth : $df;



    $df = variable_get('vconsult_paidmaxbandwidth', '');
    if (!$df) {
      $df = '200000';
    }
    $bo['maxbandwidth'] = $node->maxbandwidth ? $node->maxbandwidth : $df;





  }
  else {
    $df = variable_get('vconsult_defaultresolution', '');
    $dfv = variable_get('vconsult_defaultresolutiond', '');

    if ($df) {
      $o = explode(",", $df);
      $options = array();
      foreach ($o as $v) {
        $options[$v] = $v;
      }
      $default = $dfv;

    }
    else {
      $options = array("320x240" => "320x240", "160x120" => "160x120", "176x144" => '176x144');
      $default = "160x120";
    }
    if ($node->resolution) {
      $default = $node->resolution;
    }
    $bo['resolution'][0] = $options;
    $bo['resolution'][1] = $default;




    $df = variable_get('vconsult_defaultcamfps', '');
    $dfv = variable_get('vconsult_defaultcamfpsd', '');

    if ($df) {
      $o = explode(",", $df);
      $options = array();
      foreach ($o as $v) {
        $options[$v] = $v;
      }
      $default = $dfv;
    }
    else {
      $options = array("15" => "15", "10" => "10", "12" => "12");
      $default = "15";
    }
    if ($node->camfps) {
      $default = $node->camfps;
    }

    $bo['camfps'][0] = $options;
    $bo['camfps'][1] = $default;



    $df = variable_get('vconsult_defaultmicrate', '');
    $dfv = variable_get('vconsult_defaultmicrated', '');

    if ($df) {
      $o = explode(",", $df);
      $options = array();
      foreach ($o as $v) {
        $options[$v] = $v;
      }
      $default = $dfv;
    }
    else {

      $options = array("22" => "22", "11" => "11");
      $default = "15";
    }
    if ($node->micrate) {
      $default = $node->micrate;
    }

    $bo['micrate'][0] = $options;
    $bo['micrate'][1] = $default;




    $df = variable_get('vconsult_defaultbandwidth', '');
    if (!$df) {
      $df = '50000';
    }
    $bo['bandwidth'] = $node->bandwidth ? $node->bandwidth : $df;



    $df = variable_get('vconsult_defaultmaxbandwidth', '');
    if (!$df) {
      $df = '100000';
    }
    $bo['maxbandwidth'] = $node->maxbandwidth ? $node->maxbandwidth : $df;




  }



  return $bo;


}














/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function vconsult_node_info() {
  return array(
    'vconsult' => array(
      'name' => t('Video Consultation room'),
      'base' => 'vconsult',
      'description' => t("A <i>room</i> that can be used for customized Video Consultation."),
      'has_title' => TRUE,
      'title_label' => t('Video Consultation'),
      'has_body' => TRUE,
      'body_label' => t('Room Description'),
    ),
  );
}


function vconsult_node_access($node, $op, $account) {

  if ($op == 'access') {
    return user_access('access video consultation room', $account);
  }

  if ($op == 'create') {
    return user_access('create video consultation room', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any video consultation room', $account) || (user_access('edit video consultation room', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any video consultation room', $account) || (user_access('delete video consultation room', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_form().
 */
function vconsult_form(&$node) {
  // The site admin can decide if this node type has a title and body, and how
  // the fields should be labeled. We need to load these settings so we can
  // build the node form correctly.
  global $user; // this added by keeperprancis
  $type = node_type_get_type($node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5,
    );
  }

  if ($type->has_body) {
    // In Drupal 6, we can use node_body_field() to get the body and filter
    // elements. This replaces the old textarea + filter_form() method of
    // setting this up. It will also ensure the teaser splitter gets set up
    // properly.
    node_add_body_field($type,$type->body_label);
//    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }

  $form['room'] = array(
    '#type' => 'textfield',
    '#title' => t('New room name'),
    '#default_value' => isset($node->room) ? $node->room : variable_get('vconsult_room_prefix3', 'InstantRoom'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("Label that will be used to access the room. Leave as it is to generate one."),
  );








  $form['users'] = array('#type' => 'textarea', '#title' => t('User list'), '#default_value' => $node->users, '#description' => t('Comma separated user names.'));
  $form['moderators'] = array('#type' => 'textarea', '#title' => t('Moderator list'), '#default_value' => $node->moderators, '#description' => t('Comma separated user names'));






  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced room settings'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  if (user_access('edit welcome message', $user)) {
    $form['advanced']['welcome'] = array(
		'#type' => 'textarea',
		'#title' => t('Welcome message'),
		'#default_value' => isset($node->welcome) ? $node->welcome : 'Welcome!',
		'#cols' => 32,
		'#rows' => 2,
		'#description' => t("Welcome message displayed when entering room."),
	  );
  }
  else {
    $form['advanced']['welcome'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->welcome) ? $node->welcome : 'Welcome!',
	  );
  }


  if (user_access('edit filterregex', $user)) {
    $form['advanced']['filterregex'] = array(
		'#type' => 'textfield',
		'#title' => t('Filter regex'),
		'#default_value' => isset($node->filterregex) ? $node->filterregex : "(?i)(fuck|cunt)(?-i)",
		'#size' => 6,
		'#maxlength' => 255,
		'#description' => t("Filter regex."),
	  );
  }
  else {
    $form['advanced']['filterregex'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->filterregex) ? $node->filterregex : "(?i)(fuck|cunt)(?-i)",
	  );
  }

  if (user_access('edit filterreplace', $user)) {
    $form['advanced']['filterreplace'] = array(
			'#type' => 'textfield',
			'#title' => t('Filter replace'),
			'#default_value' => isset($node->filterreplace) ? $node->filterreplace : " ** ",
			'#size' => 6,
			'#maxlength' => 255,
			'#description' => t("Filter replace."),
		);
  }
  else {
    $form['advanced']['filterreplace'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->filterreplace) ? $node->filterreplace : " ** ",
	  );
  }

  if (user_access('edit background_url', $user)) {
    $form['advanced']['background_url'] = array(
		'#type' => 'textarea',
		'#title' => t('background_url'),
		'#default_value' => isset($node->background_url) ? $node->background_url : variable_get('vconsult_background_url3', ""),
		'#cols' => 32,
		'#rows' => 2,
		'#description' => t("background_url."),
	  );
  }
  else {
    $form['advanced']['background_url'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->background_url) ? $node->background_url : variable_get('vconsult_background_url3', ""),
	  );
  }

  if (user_access('edit layoutcode', $user)) {
    $form['advanced']['layoutcode'] = array(
		'#type' => 'textarea',
		'#title' => t('layoutcode'),
		'#default_value' => isset($node->layoutcode) ? $node->layoutcode : variable_get('vconsult_layoutcode3', ""),
		'#cols' => 32,
		'#rows' => 2,
		'#description' => t("layoutcode."),
	  );
  }
  else {
    $form['advanced']['layoutcode'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->layoutcode) ? $node->layoutcode : variable_get('vconsult_layoutcode3', ""),
	  );
  }

  if (user_access('edit room_limit', $user)) {
    $form['advanced']['room_limit'] = array(
		'#type' => 'textfield',
		'#title' => t('room_limit'),
		'#default_value' => isset($node->room_limit) ? $node->room_limit : variable_get('vconsult_room_limit3', "100"),
		'#cols' => 32,
		'#rows' => 2,
		'#description' => t("Room limit."),
	  );
  }
  else {
    $form['advanced']['room_limit'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->room_limit) ? $node->room_limit : variable_get('vconsult_room_limit3', "100"),
	  );
  }

  if (user_access('edit floodprotection', $user)) {
    $form['advanced']['floodprotection'] = array(
		'#type' => 'textfield',
		'#title' => t('floodprotection'),
		'#default_value' => isset($node->floodprotection) ? $node->floodprotection : variable_get('vconsult_floodprotection3', "3"),
		'#cols' => 32,
		'#rows' => 2,
		'#description' => t("floodprotection."),
	  );
  }
  else {
    $form['advanced']['floodprotection'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->floodprotection) ? $node->floodprotection : variable_get('vconsult_floodprotection3', "3"),
	  );
  }

  if (user_access('edit fillwindow', $user)) {
    $options = array("1" => t('Yes'), "0" => t('No'));
    $form['advanced']['fillwindow'] = array(
			'#type' => 'select',
			'#title' => t('fillwindow'),
			'#default_value' => isset($node->fillwindow) ? $node->fillwindow : variable_get('vconsult_fillwindow3', "1"),
			'#options' => $options,
			'#description' => t('fillwindow.'),
		);
  }
  else {
    $form['advanced']['fillwindow'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->fillwindow) ? $node->fillwindow : variable_get('vconsult_fillwindow3', "1"),
	  );
  }

  if (user_access('edit instantaccess', $user)) {
    $options = array("1" => t('Yes'), "0" => t('No'));
    $form['advanced']['visitors'] = array(
			'#type' => 'select',
			'#title' => t('Instant access'),
			'#default_value' => isset($node->visitors) ? $node->visitors : "1",
			'#options' => $options,
			'#description' => t('Allow non registered users to access chat. If disabled people will not be able to access chat instantly, without having and account and beeing logged in.'),
		);
  }
  else {
    $form['advanced']['visitors'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->visitors) ? $node->visitors : '1',
	  );
  }

  if (user_access('edit credits', $user)) {
    $form['advanced']['credits'] = array(
			'#type' => 'textfield',
			'#title' => t('Credits'),
			'#default_value' => isset($node->credits) ? $node->credits : 0,
			'#size' => 5,
			'#maxlength' => 6,
			'#description' => t("Maximum total number of streaming minutes this room can be used for. Usage of all users is added up (i.e. 2 users chatting for 10 minutes will require 20 credits). Leave 0 for unlimited usage time."),
		);
  }
  else {
    $form['advanced']['credits'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->credits) ? $node->credits : 0,
	  );
  }

  if ($node->timeexpire > 0) {
    $node->expire = floor(($node->timeexpire - REQUEST_TIME)  / 3600);
  }

  if (user_access('edit availability', $user)) {
    $form['advanced']['expire'] = array(
			'#type' => 'textfield',
			'#title' => t('Availability'),
			'#default_value' => isset($node->expire) ? $node->expire : 0,
			'#size' => 5,
			'#maxlength' => 6,
			'#description' => t("Number of hours this room will be accessible (i.e. 720 for 1 month). Leave 0 to make permanent room."),
		);
  }
  else {
    $form['advanced']['expire'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->expire) ? $node->expire : 0,
	  );
  }

  $node->cleanup = floor($node->timeout / 3600);
  if (user_access('edit cleanup', $user)) {
    $form['advanced']['cleanup'] = array(
			'#type' => 'textfield',
			'#title' => t('Cleanup'),
			'#default_value' => isset($node->cleanup) ? $node->cleanup : 0,
			'#size' => 5,
			'#maxlength' => 6,
			'#description' => t("If room is not used for this number of hours will be deleted. Leave 0 for no cleanup."),
		);
  }
  else {
    $form['advanced']['cleanup'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->cleanup) ? $node->cleanup : 0,
	  );
  }
/*correctable d*/

  if (user_access('edit autoplay stream', $user)) {

    $form['advanced']['al'] = array('#type' => 'fieldset', '#title' => t('Autoplay Settings'));

    $form['advanced']['al']['autoplaystream'] = array(
	'#type' => 'textfield', '#default_value' => variable_get('vconsult_autoplaystream', ''),
	  '#title' => t('Autoplay Stream'),
	  '#description' => t("Autoplay stream."),

	);

    $form['advanced']['al']['autoplayserver'] = array(
	'#type' => 'textfield', '#default_value' => variable_get('vconsult_autoplayserver', ''),
	  '#title' => t('Autoplay Server'),
	  '#description' => t("Autoplayserver."),

	  );

  }else{

  	$form['advanced']['al']['autoplaystream'] = array(
  		'#type' => 'hidden', '#default_value' =>$node->autoplaystream?$node->autoplaystream:variable_get('vconsult_autoplaystream', ''),
  		  '#title' => t('Autoplay Stream'),
  		  '#description' => t("Autoplay stream."),

  	);

  	$form['advanced']['al']['autoplayserver'] = array(
  	  		'#type' => 'hidden', '#default_value' =>$node->autoplayserver?$node->autoplayserver:variable_get('vconsult_autoplayserver', ''),
  	  		  '#title' => t('Autoplay Server'),
  	  		  '#description' => t("Autoplay server."),

  	);

  }

  if (user_access('edit publicvideoconfig', $user)) {
    $form['advanced']['vconfig'] = array('#type' => 'fieldset', '#title' => t('Video Configurations'));
    $form['advanced']['vconfig']['publicvideon'] = array('#type' => 'textfield', '#title' => t('Initial panels'), '#default_value' => $node->publicvideon ? $node->publicvideon : variable_get('vconsult_publicvideon', 3));
    $form['advanced']['vconfig']['publicvideomax'] = array('#type' => 'textfield', '#title' => t('Maximum number of panels'), '#default_value' => $node->publicvideomax ? $node->publicvideomax : variable_get('vconsult_publicvideomax', 8));
    $form['advanced']['vconfig']['publicvideowidth'] = array('#type' => 'textfield', '#title' => t('Video Panel Width'), '#default_value' => $node->publicvideowidth ? $node->publicvideowidth : variable_get('vconsult_publicvideowidth', 160));
    $form['advanced']['vconfig']['publicvideoheight'] = array('#type' => 'textfield', '#title' => t('Video Panel height'), '#default_value' => $node->publicvideoheight ? $node->publicvideoheight : variable_get('vconsult_publicvideoheight', 120));
    $form['advanced']['vconfig']['publicvideocol'] = array('#type' => 'textfield', '#title' => t('Video Panel cols'), '#default_value' => $node->publicvideocol ? $node->publicvideocol : variable_get('vconsult_publicvideocol', 2));
    $form['advanced']['vconfig']['publicvideorow'] = array('#type' => 'textfield', '#title' => t('Video Panel row'), '#default_value' => $node->publicvideorow ? $node->publicvideorow : variable_get('vconsult_publicvideorow', 0));
    $form['advanced']['vconfig']['publicvideox'] = array('#type' => 'textfield', '#title' => t('Video Panel x'), '#default_value' => $node->publicvideox ? $node->publicvideox : variable_get('vconsult_publicvideox', 100));
    $form['advanced']['vconfig']['publicvideoy'] = array('#type' => 'textfield', '#title' => t('Video Panel y'), '#default_value' => $node->publicvideox ? $node->publicvideoy : variable_get('vconsult_publicvideoy', 100));



  }
  else {
/*correctable d*/
    $form['advanced']['vconfig']['publicvideon'] = array('#type' => 'hidden', '#title' => t('Initial panels'), '#value' => $node->publicvideon ? $node->publicvideon : variable_get('vconsult_publicvideon', 3));
    $form['advanced']['vconfig']['publicvideomax'] = array('#type' => 'hidden', '#title' => t('Maximum number of panels'), '#value' => $node->publicvideomax ? $node->publicvideomax : variable_get('vconsult_publicvideomax', 8));
    $form['advanced']['vconfig']['publicvideowidth'] = array('#type' => 'hidden', '#title' => t('Video Panel Width'), '#value' => $node->publicvideowidth ? $node->publicvideowidth : variable_get('vconsult_publicvideowidth', 160));
    $form['advanced']['vconfig']['publicvideoheight'] = array('#type' => 'hidden', '#title' => t('Video Panel height'), '#value' => $node->publicvideoheight ? $node->publicvideoheight : variable_get('vconsult_publicvideoheight', 120));
    $form['advanced']['vconfig']['publicvideocol'] = array('#type' => 'hidden', '#title' => t('Video Panel cols'), '#value' => $node->publicvideocol ? $node->publicvideocol : variable_get('vconsult_publicvideocol', 2));
    $form['advanced']['vconfig']['publicvideorow'] = array('#type' => 'hidden', '#title' => t('Video Panel row'), '#value' => $node->publicvideorow ? $node->publicvideorow : variable_get('vconsult_publicvideorow', 0));
    $form['advanced']['vconfig']['publicvideox'] = array('#type' => 'hidden', '#title' => t('Video Panel x'), '#value' => $node->publicvideox ? $node->publicvideox : variable_get('vconsult_publicvideox', 100));
    $form['advanced']['vconfig']['publicvideoy'] = array('#type' => 'hidden', '#title' => t('Video Panel y'), '#value' => $node->publicvideox ? $node->publicvideoy : variable_get('vconsult_publicvideoy', 100));


  }







  $form['advanced']['cnt'] = array('#tree' => false, '#type' => 'markup', '#prefix' => '<div id="room-advanced-broadcasting-wrapper">', '#suffix' => '</div>');

  $form['advanced']['cnt']['webcam'] = array(
    '#type' => 'fieldset',
     '#parents' => array('advanced', 'webcam'),
    '#title' => t('Streaming settings'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );


  $bo = _vconsult_broadcastoptions($node);

  if (user_access('edit camwidth', $user) && user_access('edit camheight', $user)) {
    $form['advanced']['cnt']['webcam']['resolution'] = array(
			'#type' => 'select',
			'#title' => t('Resolution'),
    		'#attributes'=>array( 'class'=>array('changebroad','form-select')),

			'#default_value' =>
		$bo['resolution'][1], '#options' => $bo['resolution'][0],
			'#description' => t('Camera desired mode: resolution.'),
		);
  }
  else {
    $form['advanced']['cnt']['webcam']['resolution'] = array(
		'#type' => 'hidden',
		'#default_value' => $bo['resolution'][1]
	  );
  }

  if (user_access('edit camfps', $user)) {
    $options = array("15" => "15", "10" => "10", "12" => "12", "20" => "20", "25" => "25", "30" => "30");
    $form['advanced']['cnt']['webcam']['camfps'] = array(
			'#type' => 'select',
			'#title' => t('FPS'),
    		'#attributes'=>array( 'class'=>array('changebroad','form-select')),

			'#default_value' => $bo['camfps'][1],
			'#options' => $bo['camfps'][0],
			'#description' => t('Camera desired  mode: frames per second.'),
		);
  }
  else {
    $form['advanced']['cnt']['webcam']['camfps'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->camfps) ? $node->camfps : 15,
	  );
  }

  if (user_access('edit micrate', $user)) {
    $options = array("22" => "22", "11" => "11", "44" => "44", "48" => "48");
    $form['advanced']['cnt']['webcam']['micrate'] = array(
			'#type' => 'select',
			'#title' => t('Micrate'),
    		'#attributes'=>array( 'class'=>array('changebroad','form-select')),

			'#default_value' => $bo['micrate'][1],
			'#options' => $bo['micrate'][0],
			'#description' => t('Camera desired  mode: micrate.'),
		);
  }
  else {
    $form['advanced']['cnt']['webcam']['micrate'] = array(
		'#type' => 'hidden',
		'#default_value' => $bo['micrate'][1]
	  );
  }

  if (user_access('edit bandwidth', $user)) {
    $form['advanced']['cnt']['webcam']['bandwidth'] = array(
		'#type' => 'textfield',
		'#title' => t('Bandwidth'),
		'#default_value' => $bo['bandwidth'],
		'#size' => 6,
		'#maxlength' => 8,
		'#description' => t("Default bandwidth per video stream in bytes per second."),
	  );
  }
  else {
    $form['advanced']['cnt']['webcam']['bandwidth'] = array(
		'#type' => 'hidden',
		'#default_value' => $bo['bandwidth'],
	  );
  }

  if (user_access('edit maxbandwidth', $user)) {
    $form['advanced']['cnt']['webcam']['maxbandwidth'] = array(
		'#type' => 'textfield',
		'#title' => t('Maximum bandwidth'),
		'#default_value' => $bo['maxbandwidth'],
		'#size' => 6,
		'#maxlength' => 8,
		'#description' => t("Maximum bandwidth per video stream in bytes per second."),
	  );
  }
  else {
    $form['advanced']['cnt']['webcam']['maxbandwidth'] = array(
		'#type' => 'hidden',
		'#default_value' => $bo['maxbandwidth'],
	  );
  }

  $form['advanced']['param'] = array(
    '#type' => 'fieldset',
    '#title' => t('Parameters settings'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  if (user_access('edit externalstream', $user)) {
    $options = array("1" => t('Yes'), "0" => t('No'));
    $form['advanced']['param']['externalstream'] = array(
		'#type' => 'select',
		'#title' => t('externalstream'),
		'#default_value' => isset($node->externalstream) ? $node->externalstream : variable_get('vconsult_externalstream3', "1"),
		'#options' => $options,
		'#description' => t('externalstream.'),
	  );
  }
  else {
    $form['advanced']['param']['externalstream'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->externalstream) ? $node->externalstream : variable_get('vconsult_externalstream3', "1"),
	  );
  }

  if (user_access('edit publicvideosadd', $user)) {
    $options = array("1" => t('Yes'), "0" => t('No'));
    $form['advanced']['param']['publicvideosadd'] = array(
		'#type' => 'select',
		'#title' => t('publicvideosadd'),
		'#default_value' => isset($node->publicvideosadd) ? $node->publicvideosadd : variable_get('vconsult_publicvideosadd3', "1"),
		'#options' => $options,
		'#description' => t('publicvideosadd.'),
	  );
  }
  else {
    $form['advanced']['param']['publicvideosadd'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->publicvideosadd) ? $node->publicvideosadd : variable_get('vconsult_publicvideosadd3', "1"),
	  );
  }
  $options = array("1" => t('Yes'), "0" => t('No'), '2' => t('Moderator'));

  if (user_access('edit privatetextchat', $user)) {
    $form['advanced']['param']['privatetextchat'] = array(
		'#type' => 'select',
		'#title' => t('privatetextchat'),
		'#default_value' => isset($node->privatetextchat) ? $node->privatetextchat : variable_get('vconsult_privatetextchat3', "1"),
		'#options' => $options,
		'#description' => t('privatetextchat.'),
	  );
  }
  else {
    $form['advanced']['param']['privatetextchat'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->privatetextchat) ? $node->privatetextchat : variable_get('vconsult_privatetextchat3', "1"),
	  );
  }

  if (user_access('edit change_background', $user)) {
    $form['advanced']['param']['change_background'] = array(
		'#type' => 'select',
		'#title' => t('change_background'),
		'#default_value' => isset($node->change_background) ? $node->change_background : variable_get('vconsult_change_background3', "1"),
		'#options' => $options,
		'#description' => t('change_background.'),
	  );
  }
  else {
    $form['advanced']['param']['change_background'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->change_background) ? $node->change_background : variable_get('vconsult_change_background3', "1"),
	  );
  }

  if (user_access('edit files_enabled', $user)) {
    $form['advanced']['param']['files_enabled'] = array(
		'#type' => 'select',
		'#title' => t('files_enabled'),
		'#default_value' => isset($node->files_enabled) ? $node->files_enabled : variable_get('vconsult_files_enabled3', "1"),
		'#options' => $options,
		'#description' => t('files_enabled.'),
	  );
  }
  else {
    $form['advanced']['param']['files_enabled'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->files_enabled) ? $node->files_enabled : variable_get('vconsult_files_enabled3', "1"),
	  );
  }

  if (user_access('edit file_upload', $user)) {
    $form['advanced']['param']['file_upload'] = array(
		'#type' => 'select',
		'#title' => t('file_upload'),
		'#default_value' => isset($node->file_upload) ? $node->file_upload : variable_get('vconsult_file_upload3', "1"),
		'#options' => $options,
		'#description' => t('file_upload.'),
	  );
  }
  else {
    $form['advanced']['param']['file_upload'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->file_upload) ? $node->file_upload : variable_get('vconsult_file_upload3', "1"),
	  );
  }

  if (user_access('edit file_delete', $user)) {
    $form['advanced']['param']['file_delete'] = array(
		'#type' => 'select',
		'#title' => t('file_delete'),
		'#default_value' => isset($node->file_delete) ? $node->file_delete : variable_get('vconsult_file_delete3', "1"),
		'#options' => $options,
		'#description' => t('file_delete.'),
	  );
  }
  else {
    $form['advanced']['param']['file_delete'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->file_delete) ? $node->file_delete : variable_get('vconsult_file_delete3', "1"),
	  );
  }

  if (user_access('edit chat_enabled', $user)) {
    $form['advanced']['param']['chat_enabled'] = array(
		'#type' => 'select',
		'#title' => t('chat_enabled'),
		'#default_value' => isset($node->chat_enabled) ? $node->chat_enabled : variable_get('vconsult_chat_enabled3', "1"),
		'#options' => $options,
		'#description' => t('chat_enabled.'),
	  );
  }
  else {
    $form['advanced']['param']['chat_enabled'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->chat_enabled) ? $node->chat_enabled : variable_get('vconsult_chat_enabled3', "1"),
	  );
  }

  if (user_access('edit users_enabled', $user)) {
    $form['advanced']['param']['users_enabled'] = array(
		'#type' => 'select',
		'#title' => t('users_enabled'),
		'#default_value' => isset($node->users_enabled) ? $node->users_enabled : variable_get('vconsult_users_enabled3', "1"),
		'#options' => $options,
		'#description' => t('users_enabled.'),
	  );
  }
  else {
    $form['advanced']['param']['users_enabled'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->users_enabled) ? $node->users_enabled : variable_get('vconsult_users_enabled3', "1"),
	  );
  }

  if (user_access('edit enabledvideo', $user)) {
    $form['advanced']['param']['enabledvideo'] = array(
		'#type' => 'select',
		'#title' => t('enabledVideo'),
		'#default_value' => isset($node->enabledvideo) ? $node->enabledvideo : variable_get('vconsult_enabledvideo3', "1"),
		'#options' => $options,
		'#description' => t('enabledVideo.'),
	  );
  }
  else {
    $form['advanced']['param']['enabledvideo'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->enabledvideo) ? $node->enabledvideo : variable_get('vconsult_enabledvideo3', "1"),
	  );
  }

  if (user_access('edit enabledsound', $user)) {
    $form['advanced']['param']['enabledsound'] = array(
		'#type' => 'select',
		'#title' => t('enabledSound'),
		'#default_value' => isset($node->enabledsound) ? $node->enabledsound : variable_get('vconsult_enabledsound3', "1"),
		'#options' => $options,
		'#description' => t('enabledSound.'),
	  );
  }
  else {
    $form['advanced']['param']['enabledsound'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->enabledsound) ? $node->enabledsound : variable_get('vconsult_enabledsound3', "1"),
	  );
  }

  if (user_access('edit configuresource', $user)) {
    $form['advanced']['param']['configuresource'] = array(
		'#type' => 'select',
		'#title' => t('configureSource'),
		'#default_value' => isset($node->configuresource) ? $node->configuresource : variable_get('vconsult_configuresource3', "1"),
		'#options' => $options,
		'#description' => t('configureSource.'),
	  );
  }
  else {
    $form['advanced']['param']['configuresource'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->configuresource) ? $node->configuresource : variable_get('vconsult_configuresource3', "1"),
	  );
  }

  if (user_access('edit users_enabled', $user)) {
    $form['advanced']['param']['users_enabled'] = array(
		'#type' => 'select',
		'#title' => t('users_enabled'),
		'#default_value' => isset($node->users_enabled) ? $node->users_enabled : variable_get('vconsult_users_enabled3', "1"),
		'#options' => $options,
		'#description' => t('users_enabled.'),
	  );
  }
  else {
    $form['advanced']['param']['users_enabled'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->users_enabled) ? $node->users_enabled : variable_get('vconsult_users_enabled3', "1"),
	  );
  }

  if (user_access('edit showcamsettings', $user)) {
    $form['advanced']['param']['showcamsettings'] = array(
		'#type' => 'select',
		'#title' => t('showcamSettings'),
		'#default_value' => isset($node->showcamsettings) ? $node->showcamsettings : variable_get('vconsult_showcamsettings3', "1"),
		'#options' => $options,
		'#description' => t('showcamSettings.'),
	  );
  }
  else {
    $form['advanced']['param']['showcamsettings'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->showcamsettings) ? $node->showcamsettings : variable_get('vconsult_showcamsettings3', "1"),
	  );
  }

  if (user_access('edit regularcams', $user)) {
    $form['advanced']['param']['regularcams'] = array(
		'#type' => 'select',
		'#title' => t('regularcams'),
		'#default_value' => isset($node->regularcams) ? $node->regularcams : variable_get('vconsult_regularcams3', "1"),
		'#options' => $options,
		'#description' => t('regularcams.'),
	  );
  }
  else {
    $form['advanced']['param']['regularcams'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->regularcams) ? $node->regularcams : variable_get('vconsult_regularcams3', "1"),
	  );
  }

  if (user_access('edit regularwatch', $user)) {
    $form['advanced']['param']['regularwatch'] = array(
		'#type' => 'select',
		'#title' => t('regularwatch'),
		'#default_value' => isset($node->regularwatch) ? $node->regularwatch : variable_get('vconsult_regularwatch3', "1"),
		'#options' => $options,
		'#description' => t('regularwatch.'),
	  );
  }
  else {
    $form['advanced']['param']['regularwatch'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->regularwatch) ? $node->regularwatch : variable_get('vconsult_regularwatch3', "1"),
	  );
  }

  if (user_access('edit slideshow', $user)) {
    $form['advanced']['param']['slideshow'] = array(
		'#type' => 'select',
		'#title' => t('slideshow'),
		'#default_value' => isset($node->slideshow) ? $node->slideshow : variable_get('vconsult_slideshow3', "1"),
		'#options' => $options,
		'#description' => t('slideshow.'),
	  );
  }
  else {
    $form['advanced']['param']['slideshow'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->slideshow) ? $node->slideshow : variable_get('vconsult_slideshow3', "1"),
	  );
  }

  if (user_access('edit advancedcamsettings', $user)) {
    $form['advanced']['param']['advancedcamsettings'] = array(
		'#type' => 'select',
		'#title' => t('advancedcamsettings'),
		'#default_value' => isset($node->advancedcamsettings) ? $node->advancedcamsettings : variable_get('vconsult_advancedcamsettings3', "1"),
		'#options' => $options,
		'#description' => t('advancedcamsettings.'),
	  );
  }
  else {
    $form['advanced']['param']['advancedcamsettings'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->advancedcamsettings) ? $node->advancedcamsettings : variable_get('vconsult_advancedcamsettings3', "1"),
	  );
  }
/*correctable d*/
  if (user_access('edit write_text', $user)) {
  	$form['advanced']['param']['write_text'] = array(
  		'#type' => 'select',
  		'#title' => t('write text'),
  		'#default_value' => isset($node->write_text) ? $node->write_text : variable_get('vconsult_write_text3', "1"),
  		'#options' => $options,
  		'#description' => t('write text.'),
  	);
  }
  else {
  	$form['advanced']['param']['write_text'] = array(
  		'#type' => 'hidden',
  		'#default_value' => isset($node->write_text) ? $node->write_text : variable_get('vconsult_write_text3', "1"),
  	);
  }

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * We don't want the Video Consultation rooms to get to the first page and the wrong kind of attention.
 */
function vconsult_form_vconsult_node_form_alter(&$form, $form_state) {
  $form['options']['promote']['#disabled'] = TRUE;
  $form['options']['promote']['#default_value'] = 0;
  $form['options']['promote']['#value'] = 0;
}

/**
 * Implements hook_delete().
 */
function vconsult_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query('DELETE FROM {vconsult_rooms} WHERE nid = %d', array($node->nid)) */
  db_delete('vconsult_rooms')
  ->condition('nid', array($node->nid))
  ->execute();
}

/**
 * Implements hook_insert().
 */
function vconsult_insert($node) {

  $room = check_plain($node->room);
  if ($room == variable_get('vconsult_room_prefix3', 'InstantRoom')) {
    $room = variable_get('vconsult_room_prefix3', 'InstantRoom') . "_" . base_convert((REQUEST_TIME - 1225500000) . rand(0, 10), 10, 36);
  }

  $cam = explode("x", $node->advanced['webcam']['resolution']);
  $expiration = 0;
  if ($node->advanced['expire']) {
    $expiration = $node->advanced['expire'] * 3600 + REQUEST_TIME;
  }
  $welcome = nl2br($node->advanced['welcome']);
  $ztime = REQUEST_TIME;
if(!$node->advanced['param']['write_text'])
$node->advanced['param']['write_text']=0;
/*correctable d*/
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  db_query("INSERT INTO {vconsult_rooms} ( vid, nid, room, welcome, timecreated, timelastaccess, timeexpire, timeout, credits, bandwidth, maxbandwidth, camwidth, camheight, camfps, visitors,
   micrate, filterregex, filterreplace, room_limit, floodprotection, fillwindow, layoutcode, background_url, privatetextchat, change_background, enabledvideo, enabledsound, configuresource, files_enabled, showcamsettings, file_upload, file_delete, chat_enabled,
   users_enabled, write_text, regularcams, regularwatch, slideshow, advancedcamsettings, publicvideosadd, externalstream
   ,users,moderators
   ,publicvideon,publicvideomax,publicvideowidth,publicvideoheight,publicvideocol,publicvideorow,publicvideox,publicvideoy
   ,autoplayserver,   autoplaystream


   )
   VALUES ( ?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? ,
   ?,?,
   ?,?,?,?,?,?,?,?,
   ?,?)", array($node->vid, $node->nid, $room, $welcome, $ztime, $ztime, $expiration, $node->advanced['cleanup'] * 3600, $node->advanced['credits'], $node->advanced['webcam']['bandwidth'], $node->advanced['webcam']['maxbandwidth'], $cam[0], $cam[1], $node->advanced['webcam']['camfps'], $node->advanced['visitors'],
   $node->advanced['webcam']['micrate'], addslashes($node->advanced['filterregex']), addslashes($node->advanced['filterreplace']), $node->advanced['room_limit'], $node->advanced['floodprotection'], $node->advanced['fillwindow'], addslashes($node->advanced['layoutcode']), addslashes($node->advanced['background_url']),
   $node->advanced['param']['privatetextchat'], $node->advanced['param']['change_background'], $node->advanced['param']['enabledvideo'], $node->advanced['param']['enabledsound'], $node->advanced['param']['configuresource'], $node->advanced['param']['files_enabled'], $node->advanced['param']['showcamsettings'], $node->advanced['param']['file_upload'],
   $node->advanced['param']['file_delete'], $node->advanced['param']['chat_enabled'],
   $node->advanced['param']['users_enabled'], $node->advanced['param']['write_text'],
   $node->advanced['param']['regularcams'], $node->advanced['param']['regularwatch'],
   $node->advanced['param']['slideshow'], $node->advanced['param']['advancedcamsettings'],
   $node->advanced['param']['publicvideosadd'], $node->advanced['param']['externalstream'],
   $node->users, $node->moderators,
   $node->advanced['vconfig']['publicvideon'], $node->advanced['vconfig']['publicvideomax'], $node->advanced['vconfig']['publicvideowidth'], $node->advanced['vconfig']['publicvideoheight'], $node->advanced['vconfig']['publicvideocol'], $node->advanced['vconfig']['publicvideorow'], $node->advanced['vconfig']['publicvideox'], $node->advanced['vconfig']['publicvideoy']
  ,$node->advanced['al']['autoplayserver']

  ,$node->advanced['al']['autoplaystream']


   ));

  $options = array("attributes" => array("title" => $node->room, 'target' => '_blank'));
  $link = l($room, "node/" . $node->nid, $options);
  drupal_set_message(t('Use this link to access this Video Consultation room and invite the other participant: ') . "<BR>" . $link);
}

/**
 * Implements hook_insert().
 */
function vconsult_update($node) {
	if(!$node->advanced['param']['write_text'])
	$node->advanced['param']['write_text']=0;

  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    vconsult_insert($node);
  }
  else {

    $room = check_plain($node->room);
    if ($room == variable_get('vconsult_room_prefix3', 'InstantRoom')) {
      $room = variable_get('vconsult_room_prefix3', 'InstantRoom') . "_" . base_convert((REQUEST_TIME - 1225500000) . rand(0, 10), 10, 36);
    }

    $cam = explode("x", $node->advanced['webcam']['resolution']);
    $expiration = 0;
    if ($node->advanced['expire']) {
      $expiration = $node->advanced['expire'] * 3600 + REQUEST_TIME;
    }
    $welcome = nl2br($node->advanced['welcome']);
    $ztime = REQUEST_TIME;

    db_query("UPDATE {vconsult_rooms} SET room=?, welcome=?, timecreated=?, timelastaccess=?, timeexpire=?, timeout=?, credits=?, bandwidth=?, maxbandwidth=?, camwidth=?, camheight=?, camfps=?, visitors=?,
     micrate=?, filterregex=?, filterreplace=?, room_limit=?, floodprotection=?, fillwindow=?, layoutcode=?, background_url=?, privatetextchat=?, change_background=?, enabledvideo=?, enabledsound=?, configuresource=?, files_enabled=?, showcamsettings=?, file_upload=?, file_delete=?, chat_enabled=?,
     users_enabled=?, write_text=?, regularcams=?, regularwatch=?, slideshow=?, advancedcamsettings=?, publicvideosadd=?, externalstream=?


     ,users=?,moderators=?
     ,publicvideon=?,publicvideomax=?,publicvideowidth=?,publicvideoheight=?,publicvideocol=?,publicvideorow=?,publicvideox=?,publicvideoy=?
	,autoplayserver=?,autoplaystream=?

     WHERE vid = ?", array($room, $welcome, $ztime, $ztime, $expiration, $node->advanced['cleanup'] * 3600, $node->advanced['credits'], $node->advanced['webcam']['bandwidth'], $node->advanced['webcam']['maxbandwidth'], $cam[0], $cam[1], $node->advanced['webcam']['camfps'], $node->advanced['visitors'],
     $node->advanced['webcam']['micrate'], $node->advanced['filterregex'], $node->advanced['filterreplace'], $node->advanced['room_limit'], $node->advanced['floodprotection'], $node->advanced['fillwindow'], addslashes($node->advanced['layoutcode']), addslashes($node->advanced['background_url']),
     $node->advanced['param']['privatetextchat'], $node->advanced['param']['change_background'], $node->advanced['param']['enabledvideo'], $node->advanced['param']['enabledsound'], $node->advanced['param']['configuresource'], $node->advanced['param']['files_enabled'], $node->advanced['param']['showcamsettings'],
     $node->advanced['param']['file_upload'], $node->advanced['param']['file_delete'], $node->advanced['param']['chat_enabled'],
     $node->advanced['param']['users_enabled'], $node->advanced['param']['write_text'],
     $node->advanced['param']['regularcams'], $node->advanced['param']['regularwatch'],
     $node->advanced['param']['slideshow'], $node->advanced['param']['advancedcamsettings'],
     $node->advanced['param']['publicvideosadd'], $node->advanced['param']['externalstream'],

     $node->users, $node->moderators,
    $node->advanced['vconfig']['publicvideon'], $node->advanced['vconfig']['publicvideomax'], $node->advanced['vconfig']['publicvideowidth'], $node->advanced['vconfig']['publicvideoheight'], $node->advanced['vconfig']['publicvideocol'], $node->advanced['vconfig']['publicvideorow'], $node->advanced['vconfig']['publicvideox'], $node->advanced['vconfig']['publicvideoy']
    ,$node->advanced['al']['autoplayserver']

    ,$node->advanced['al']['autoplaystream']
/*correctable d*/
///     $node->publicvideon, $node->publicvideomax, $node->publicvideowidth, $node->publicvideoheight, $node->publicvideocol, $node->publicvideorow, $node->publicvideox, $node->publicvideoy


     , $node->vid ));

  }
}

/**
 * Implements hook_load().
 */
function vconsult_load($nodes) {
  foreach ($nodes as $nid => &$node) {
    $aq = db_query('SELECT * FROM {vconsult_rooms} WHERE vid = :vid', array(':vid' => array($node->vid)));
    $additions = $aq->fetchAssoc();
    foreach ($additions as $property => &$value) {
      $node->$property = $value;
    }
  }
}

/**
 * Implements hook_view().
 */
function vconsult_view($node, $view_mode='full') {
  global $user;
  vconsult_cleanup();
  $teaser=true;
  if($view_mode=='full')
  $teaser=false;

  $disabled_content = "";
  $room_access      = 1;
  $myroom           = db_query("SELECT * FROM {vconsult_rooms} WHERE room = :room", array(':room' => array($node->room)));
  if ($myroom !== FALSE) {
    $row = $myroom->fetchAssoc();
    if (!$node->visitors && !$user->name) {
      $room_access = 0;
    }
  }
  else {
    $disabled_content = t('Room not found. Probably cleaned up: ') . $node->room;
  }

  if (!$room_access && !$disabled_content) {
    $disabled_content .= t('Instant access to visitors is disabled. You need to be @r and @l into this website to access this room.', array('@r' => l('registered', 'user/register'), '@l' => array('logged', 'user/login')));

    ///    $disabled_content .= t('Instant access to visitors is disabled. You need to be registered and logged into this website to access this room.');

  }

  $options        = array("attributes" => array("title" => $node->room, 'target' => '_blank'));
  $link           = l($node->room, "node/" . $node->nid, $options);
  $access_content = "<BR>" . t('Use this link to access this Video Consultation room and invite the other participant: ') . "<BR>" . $link;

  $stats_content .= t('Resolution') . ": " . $node->camwidth . "x" . $node->camheight . "@" . $node->camfps . "<BR>" . t('Bandwidth') . ": " . $node->bandwidth . "/" . $node->maxbandwidth . t(' bytes/s') . "<BR>" . t('Streaming time used') . ": " . floor($node->timeused / 60000) . t(' minutes') . "" . t(' Of ') . ": " . ($node->credits ? ($node->credits . t(' minutes')) : t('unlimited')).t(' Available credits.');

  if ($teaser) {
    $node->content['body'] = array(
      '#markup' => $link . "<BR>" .vwrooms_body($node),
    );
  }
  else {
    $node->content['body'] = array(
      '#markup' =>drupal_render(drupal_get_form('vconsult_start_form', $node)) . "<BR>" .vwrooms_body($node) . $access_content . "<BR>" . $stats_content,
    );
  }

  if ($disabled_content) {
    $node->content['body'] = array(
    '#markup' => $disabled_content,
  );
  }

  return $node;
}



/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function vconsult_start() {
  ob_start();
  global $base_url, $user;
  $url = $base_url . variable_get('vconsult_path', "/vconsult/");
  if (variable_get('vconsult_path', "/vconsult/") == "/vconsult/") {

    return t('error: server Not configured.');
  }



  $uid = $user->uid;
  $r = $room = filter_xss($_POST["r"]);
  $md5 = user_password(32);
  $username = $uname = filter_xss($_POST['username']);
  if (!$username || $username == "Guest") {
    $uname = $username = "Guest" . rand(1000, 9999);
  }
  if (!$uname) {
    $uname = $user->name;
  }
  $username = $uname;

  setcookie("user_name", urlencode($username), REQUEST_TIME + 50000);
  setcookie("room_name", urlencode($r), REQUEST_TIME + 50000);


  if (in_array($uname, explode(',', variable_get('vwrooms_bannednames', '')))) {
    return t('Bad user name.');
  }

  if (!$uid) {

    return drupal_access_denied();
  }

  $mr = db_query("SELECT r.*,n.uid FROM {vconsult_rooms} r inner join {node} n on (n.vid=r.vid) WHERE room = ? and n.uid = ?",  array($room, $user->uid))->fetchObject();
  //print_r($mr);
  if (!$mr->nid) {
    return t('Invalid room @r', array('@r' => $room));

  }
  $rid = $mr->nid;
  $oid = $mr->uid;

  if ($oid == $user->uid) {

    $fu = db_query("select * from {vwrooms_users} where uname = ? and room_nid=? ", array($uname, $rid))->fetchObject();
    if ($fu->id) {
      if (!$user->uid) {
        return t("Username in use");
      }

      if ($fu->uid != $user->uid) {
        return t("Username in use");
      }

      db_query("update {vwrooms_users} set uname=? ,hash=? where id=?", array($uname, $md5, $fu->id));
      $id = $fu->id;



    }
    //fu
    else {

      db_query("insert into {vwrooms_users} set uname=? ,hash=?,timestamp=now(),room_nid=?,uid=?,room=?,o=1", array($uname, $md5, $rid, $user->uid, $room));
      $id = vwrooms_insert_id();


    }









  }
  else {

    return t('Not owner');
  }
  //nowner

  if (!$id) {
    return t('User not created');

  }

  ///print_r($fu);



  $loggedin = 1;
  $msg = '';
  if (module_exists('vwcredits')) {


    $x = variable_get("vwcredits_vconsult_idletime", 40);
    if (!$x) {
      $x = 40;
    }
    $t = REQUEST_TIME;


    // TODO Please convert this statement to the D7 database API syntax.
    db_query("update {vwcredits_transaction} set applied=1,app_time=from_unixtime(pts) where applied=0 and adddate(from_unixtime(pts),interval $x second) <now() and type in ('roomcost','ownersroomcost','ownersgain','ownerscost') and room_nid=?", array($rid));

    $fr = db_query("select * from {vwcredits_cost} where room_nid=? ", array($rid))->fetchObject();

    if (!$fr->uid) {
      //nocost

    }

    else {
      if (!$user->uid) {
        return t('This room is not accessible. Please @a or @b for more details.', array('@a' => l(t('register'), 'user/register'), '@b' => l(t('login'), 'user/login')));

      }

      $paidroom = 1;
      $ft = db_query("select * from {vwcredits_tmpcr}   where uid=? ", array($user->uid))->fetchObject();
      if (!$ft->uid) {
        db_query("insert into {vwcredits_tmpcr} set uid=? ", array($user->uid));

      }
      $ft = db_query("select * from {vwcredits_credit}   where uid=? ", array($user->uid))->fetchObject();
      if (!$ft->uid) {
        db_query("insert into {vwcredits_credit} set uid=?", array($user->uid));

      }

      //fruid


    }
    //cost>
  }
  //cr

  //setcookie('vconsult_uid','',0,"/");
  //setcookie("vconsult_hash",'',0,'/');
  //setcookie("vconsult_room",'',0,'/');
  $owner = true;

  if ($owner) {
    setcookie('vconsult_uid', $id, 0, "/");
    setcookie("vconsult_hash", $md5, 0, '/');
    setcookie("vconsult_room", $room, 0, '/');

  }
  else {


  }



  $swfurl = $url . "/consultation.swf?room=" . urlencode($r);
  if (!variable_get('vwrooms_in', 0)) {
    echo theme('vconsult_swf', array('swfurl' => $swfurl, 'base' => $url));
    exit;

  }
  else {
    return theme('vconsult_swf', array('swfurl' => $swfurl, 'base' => $url));

  }




}





/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function vconsult_join() {
  ob_start();

  global $base_url, $user;
  $url = $base_url . variable_get('vconsult_path', "/vconsult/");
  if (variable_get('vconsult_path', "/vconsult/") == "/vconsult/") {

    return t('error: server Not configured.');
  }
  //setcookie('vconsult_uid','',0,"/");
  //setcookie("vconsult_hash",'',0,'/');
  //setcookie("vconsult_room",'',0,'/');




  $uid = $user->uid;
  $r = $room = filter_xss($_POST["r"]);
  $md5 = user_password(32);
  $username = $uname = filter_xss($_POST['username']);
  if (!$username || $username == "Guest") {
    $uname = $username = "Guest" . rand(1000, 9999);
  }
  if (!$uname && $user->uid) {
    $uname = $user->name;
  }
  if (!$uname || $uname == 'Guest') {
    $uname = 'Guest' . rand(0, 100000);
  }

  if (in_array($uname, explode(',', variable_get('vwrooms_bannednames', '')))) {
    return t('Username not allowed.');
  }


  $mr = db_query("SELECT r.*,n.uid FROM {vconsult_rooms} r inner join {node} n on (n.vid=r.vid) WHERE room = :room ", array(':room' => array($room)))->fetchObject();
  //print_r($mr);
  if (!$mr->nid) {
    return t('Invalid room @r', array('@r' => $room));

  }
  $rid = $mr->nid;
  $oid = $mr->uid;

  if ($oid == $user->uid) {

    return t('Owner not allowed.');
  }

  if ($mr->users) {
    if (!$user->uid) {
      return t('Guest cannot join');
    }

    if (!(in_array($user->name, explode(',', $mr->users)) || in_array($user->mail, explode(',', $mr->users)))) {
      return t('User not allowed.');

    }


  }
  if (!$mr->visitors && !$uid) {
    return t('Instant access to visitors is disabled. You need to be @r and @l into this website to access this room.', array('@r' => l('registered', 'user/register'), '@l' => array('logged', 'user/login')));
  }

  ///    return t('Guest not allowed.');




  if ($oid == $user->uid) {
    return t('Owner not allowed.');
  }
  else {
    $fu = db_query("select * from {vwrooms_users} where uname = ? and room_nid=? ", array($uname, $rid))->fetchObject();
    if ($fu->id) {
      if (!$user->uid) {
        return t("Username in use");
      }

      if ($fu->uid != $user->uid) {
        return t("Username in use");
      }

      db_query("update {vwrooms_users} set uname=? ,hash=? where id=?", array($uname, $md5, $fu->id));
      $id = $fu->id;



    }
    //fu
    else {

      db_query("insert into {vwrooms_users} set uname=? ,hash=?,timestamp=now(),room_nid=?,uid=?,room=?,o=0", array($uname, $md5, $rid, $user->uid, $room));
      $id = vwrooms_insert_id();


    }
  }
  //nowner

  if (!$id) {
    return t('User not created');

  }

  ///print_r($fu);



  $loggedin = 1;
  $msg = '';
  if (module_exists('vwcredits')) {


    $x = variable_get('vwcredits_vconsult_idletime', 40);
    if (!$x) {
      $x = 40;
    }
    $t = REQUEST_TIME;


    // TODO Please convert this statement to the D7 database API syntax.
    db_query("update {vwcredits_transaction} set applied=1,
    app_time=from_unixtime(pts) where applied=0 and adddate(from_unixtime(pts),interval $x second) <now() and
    type in ('roomcost','ownersroomcost','ownersgain','ownerscost') and room_nid=?", array($rid));

    $fr = db_query("select * from {vwcredits_cost} where room_nid=? ", array($rid))->fetchObject();
    if (!$fr->uid) {
      //nocost

    }

    else {
      if (!$user->uid) {

        return t('This room is not accessible. Please @a or @b for more details.', array('@a' => l(t('register'), 'user/register'), '@b' => l(t('login'), 'user/login')));
      }

      $paidroom = 1;
      $ft = db_query("select * from {vwcredits_tmpcr}   where uid=? ", array($user->uid))->fetchObject();
      if (!$ft->uid) {
        db_query("insert into {vwcredits_tmpcr} set uid=?", array($user->uid));

      }
      if ($ft->bal < $cr) {


      }

      $ft = db_query("select * from {vwcredits_credit}   where uid=?", array($user->uid));
      if (!$ft->uid) {
        db_query("insert into {vwcredits_credit} set uid=?", array($user->uid));

      }










    }
    //cost>
  }
  //cr



  setcookie('vconsult_room', $room, 0, "/");
  setcookie('vconsult_uid', $id, 0, "/");
  setcookie("vconsult_hash", $md5, 0, '/');






  $swfurl = $url . "/consultation.swf?room=" . urlencode($r);
  if (!variable_get('vwrooms_in', 0)) {
    echo theme('vconsult_swf', array('swfurl' => $swfurl, 'base' => $url));
    exit;

  }
  else {
    return theme('vconsult_swf', array('swfurl' => $swfurl, 'base' => $url));

  }



}



/**
 * implementation of  hook_theme
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function vconsult_theme() {

  $path = drupal_get_path('module', 'vconsult');

  return array(
'vconsult_swf' => array('variables' => array('swfurl' => null, 'base' => null), 'path' => $path . '/templates', 'template' => 'vconsult_swf')


);

}
